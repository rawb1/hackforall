directive @constraint(
  """String constraints"""
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  pattern: String
  format: String

  """Number constraints"""
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
  uniqueTypeName: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @auth(requires: Role!) on OBJECT | FIELD_DEFINITION

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

enum Role {
  ADMIN
  USER
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

scalar Date

type File {
  filename: String
  mimetype: String
  encoding: String
}

type Query {
  _empty: String
  login(user: UserInput!, remember: Boolean = false): User
  logout: Boolean
  forgot(email: String!): String
  me: User
  hacker(id: ID!): User
  hackers: [User]
  application: Application
  team(name: String): Team
  teams: [Team]
  hackathon: Hackathon
  hackathons: [Hackathon]
  stats: Stats
  hackathonStats: HackathonStats
  sponsor(id: ID): Sponsor
  sponsors: [Sponsor]
}

type Mutation {
  _empty: String
  register(user: UserInput!): User
  reset(newPassword: String!, resetToken: String!): Boolean
  saveApplication(form: ApplicationFormInput!): Application
  cancelApplication(id: ID): Application
  acceptApplication(id: ID): Application
  refuseApplication(id: ID): Application
  createTeam(name: String!): Team
  joinTeam(name: String!): Boolean
  leaveTeam(name: String!): Boolean
  recruit(name: String!, userId: ID!): Boolean
  updateHackathon(Hackathon: HackathonInput): Hackathon
  cancelHackathon: Hackathon
}

type User {
  _id: ID
  username: String!
  email: String!
  role: Role!
  application: Application
  team: Team
}

input UserInput {
  username: String
  email: String!
  password: String!
}

enum ApplicationStatus {
  INCOMPLETE
  PENDING
  REFUSED
  ACCEPTED
  CANCELED
}

type Application {
  _id: ID
  userId: ID
  hackathonId: ID
  form: ApplicationForm
  files: FileUploads
  status: ApplicationStatus
  updatedAt: Date
}

type FileUploads {
  resume: File
  travelReceipt: File
}

type ApplicationForm {
  name: String
  school: String
  phone: String
  garduationYear: String
  studyFields: [String]
  interests: [String]
  github: String
  dietaryRestrictions: [String]
  teeShirtSize: String
  needHardware: Boolean
  needAccomodation: Boolean
  needTravelReimbursement: Boolean
  hardwareList: [String]
  paypalAddress: String
  AccomodationPreferences: [String]
  hostMatchingDetails: String
  majority: Boolean
  liability: Boolean
  photoRelease: Boolean
  codeOfConduct: Boolean
  additionalNotes: String
}

input ApplicationFormInput {
  name: String!
  school: String!
  phone: String!
  garduationYear: String!
  studyFields: [String]!
  interests: [String]
  github: String
  resume: Upload
  dietaryRestrictions: [String]
  teeShirtSize: String!
  needHardware: Boolean
  needAccomodation: Boolean
  needTravelReimbursement: Boolean
  hardwareList: [String]
  paypalAddress: String
  travelReceipt: Upload
  AccomodationPreferences: [String]
  hostMatchingDetails: String
  majority: Boolean!
  liability: Boolean!
  photoRelease: Boolean!
  codeOfConduct: Boolean!
  additionalNotes: String
}

type Team {
  _id: ID
  hackathonId: ID
  name: String
  members: [User]
  applicants: [User]
}

type Hackathon {
  _id: ID
  name: String
  dates: hackathonDates
  limits: hackathonLimits
  open: Boolean
  live: Boolean
}

type hackathonDates {
  applications: applicationsDates
  start: Date
  end: Date
}

type applicationsDates {
  open: Date
  close: Date
}

type hackathonLimits {
  hackers: Int
  team: Int
  refund: Float
}

input HackathonInput {
  name: String
  dates: hackathonDatesInput
  limits: hackathonLimitsInput
}

input hackathonDatesInput {
  applications: applicationsDatesInput
  start: Date
  end: Date
}

input applicationsDatesInput {
  open: Date
  close: Date
}

input hackathonLimitsInput {
  hackers: Int
  team: Int
  refund: Float
}

type Stats {
  users: Int
  hackathons: Int
  applications: Int
  teams: Int
  hacks: Int
}

type HackathonStats {
  applications: Int
  hackers: Int
  teams: Int
  hacks: Int
}

type Sponsor {
  _id: ID
  hachathonId: ID
  name: String
}
